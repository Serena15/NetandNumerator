package Sfera::TCP::Calc;
use strict;
use DDP;
use feature "switch";
no warnings 'experimental::smartmatch';

sub TYPE_CALC         {1}
sub TYPE_NOTATION     {2}
sub TYPE_BRACKETCHECK {3}

sub pack_header {
	my $pkg = shift;
	my $type = shift;
	my $size = shift;
	return pack("C S", $type, $size);
}

sub unpack_header {
	my $pkg = shift;
	my $header = shift;
        print "header == $header\n";
	return unpack("C S", $header);
}

sub pack_message {
	my $pkg = shift;
	my $message = shift;
	return pack("A*", $message);
}

sub unpack_message {
	my $pkg = shift;
	my $message = shift;
        return unpack("A*", $message);
}

our $outputstr = "";
our $op = "";
our @outstr = ();

sub GetExpression{
   
	my @operstack=();
	my @e=@_;
	my $priority = 0;
	my $prioritystack = 0;
	my $j=0;
	my $flag = 0;
	my $flag1 = 0;	
	my $flag2 = 0;	
	my $is_number = 0;	
	my $expression = join(//,@e);
	my $brackets = IsCorrectBrackets($expression);
	if($brackets) {
        for (my $i = 0; $i <= $#e; $i++) {	
		next if $e[$i] eq " ";
		if($flag1) {		
			$flag1 = 0;		
		}		
		else {		
			$op = $e[$i];			
		}		
        	if ($op =~ m/[0-9]{1}|\.{1}/s) {   
            		while (!($op eq " ") and !($op eq "+" or $op eq "-" or $op eq "*" or $op eq "/" or $op eq "^" or $op eq "!" or $op eq "(" or $op eq ")")) {                
				 $flag = 1 if $op eq "e";
				 $outputstr = $outputstr.$e[$i]; 
                		 $i++;				 
				 $op = $e[$i];				 
				 last if $flag;
                		 last if $i == $#e; 
             }				
			 if($flag) {
				unless($op eq "+" or $op eq "-"){				 
					print "Uncorrect value\n";					
					return "error\n";
				 }				
				$outputstr = $outputstr.$e[$i];				
				$i++;				
				$op = $e[$i];				
				while (!($op eq " ") and !($op eq "+" or $op eq "-" or $op eq "*" or $op eq "/" or $op eq "^" or $op eq "!" or $op eq "(" or $op eq ")")) {
				 	$outputstr = $outputstr.$e[$i];			 
					$i++;				 
					$op = $e[$i];					 
					last if $i == $#e; 
				}		 				 
				$outputstr = $outputstr.' ';					 
				$i--;				
				$flag = 0;
			 } 
			 else{			 					 
				 $outputstr = $outputstr.' ';					 
				 $i--; 					 
			 }                        			 
			 $op = $e[$i];	
			 $is_number = 1;		 
        } 
	if($op eq "-" && !$is_number) {		
			$op = "!";		
			$outputstr = $outputstr.$op;			
		}		
	if($op eq "-" && ($e[($i-1)] eq "+" or $e[($i-1)] eq "-" or $e[($i-1)] eq "*" or $e[($i-1)] eq "/" or $e[($i-1)] eq "^") ) {
			$op = "!";
			$flag2 = 1;	
		}		
        if ($op eq "+" or $op eq "-" or $op eq "*" or $op eq "/" or $op eq "**" or $op eq "^" or $op eq "!" or $op eq "(" or $op eq ")") {
            if ($op eq "(") { 			
				push @operstack , $op;					
				$j=$#operstack;
			}
            elsif ($op eq ")") {					
				$j=$#operstack;                
				while(!($operstack[$j] eq "(")) {				
					$outputstr = $outputstr.(pop @operstack);					
					$outputstr = $outputstr.' ';					
					$j--;				
				}				
				pop @operstack;				
				$j--;				
			}
			elsif($op eq "-" && $e[($i-1)] eq "(") {			
					$op = "!";		
					$outputstr = $outputstr.$op;			
			}
			elsif($i + 1 <= $#e && $op eq "*" && $e[($i + 1)] eq "*") {						
					$op = $op.$e[($i + 1)];							
					push @operstack, $op;							
					$flag1 = 1;							
					$i++;									
					$op=$e[($i + 1)] if $i + 1 <= $#e;								
			
			}
			else {						
					$j=$#operstack;				
					if(@operstack) {						
						switch: {
							$prioritystack = 0,last switch if $operstack[$j] eq "(";		
							$prioritystack = 0,last switch if $operstack[$j] eq ")";
							$prioritystack = 1,last switch if $operstack[$j] eq "!";
							$prioritystack = 4,last switch if $operstack[$j] eq "^";
							$prioritystack = 4,last switch if $operstack[$j] eq "**";
							$prioritystack = 3,last switch if $operstack[$j] eq "*";
							$prioritystack = 3,last switch if $operstack[$j] eq "/";
							$prioritystack = 2,last switch if $operstack[$j] eq "+";
							$prioritystack = 2,last switch if $operstack[$j] eq "-";
						}						
						switch: {
							$priority = 0,last switch if $op eq "(";			
							$priority = 0,last switch if $op eq ")";	
							$priority = 1,last switch if $op eq "!";
							$priority = 4,last switch if $op eq "^";
							$priority = 4,last switch if $op eq "**";
							$priority = 3,last switch if $op eq "*";
							$priority = 3,last switch if $op eq "/";
							$priority = 2,last switch if $op eq "+";
							$priority = 2,last switch if $op eq "-";
						}
						if($priority <= $prioritystack) {						
							$outputstr = $outputstr.(pop @operstack);					
							$outputstr = $outputstr.' ';							
							$outputstr = $outputstr."!",$flag2 = 0 if ($flag2);				
						}
					}					
					push @operstack, $op unless $op eq "!";		
				}
        		}	
   		 }		
	$j = $#operstack;	
	while(@operstack) {		
		$outputstr = $outputstr.(pop @operstack);		
		$outputstr = $outputstr.' ';	
		$j--;
	}	
   	 return $outputstr; 
	}
	else {
		return "Uncorrect expression\n";
	}
}

sub Counting {
	my $result = 0;	
	my @temp = ();
	my (@a_array, @b_array) = ( (), () );
	my ($astr, $bstr) = ("","");
	my $flaga = 0;
	my $flagb = 0;		
	
	for(my $i = 0; $i <= $#outstr; $i++) {	
		$op = $outstr[$i];		
		next if $op eq " ";
		if ($op =~ m/[0-9]{1}|\.{1}|\!{1}/s) { 			 
           		  while (!($op eq " ")) {                
				 $outputstr = $outputstr.$op;				 
                		 $i++;				 
				 $op = $outstr[$i];				 
               			 last if $i == $#outstr; 
			  }
			push @temp, $outputstr;			
			$outputstr = "";
	
		}
		elsif($op eq "+" or $op eq "-" or $op eq "*" or $op eq "/" or $op eq "^") {		
			@a_array = pop @temp;			
			@b_array = pop @temp;			
			if($i + 1 <= $#outstr && $op eq "*" && $outstr[($i + 1)] eq "*") {			
				$op = $op.$outstr[($i + 1)];				
				$i++;
				
			}
			for(my $j = 0; $j <= $#a_array; $j++) {				
				if($a_array[$j] =~ m/\!+/s ) {		
					$a_array[$j] =~ s/!//;				
					$flaga = 1;				
				}				
				$astr = $astr.$a_array[$j];			
			}			
			for(my $j = 0; $j <= $#b_array; $j++) {			
				if($b_array[$j] =~ m/\!+/s) {		
					$b_array[$j] =~ s/!//;					
					$flagb = 1;					
				}				
				$bstr = $bstr.$b_array[$j];		
				
			}
			$astr *= -1 if $flaga;
			$bstr *= -1 if $flagb;						
			$flaga = $flagb = 0;						
			switch: {							
							$result = $bstr ** $astr,last switch if $op eq "^";
							$result = $bstr ** $astr,last switch if $op eq "**";
							$result = $bstr * $astr,last switch if $op eq "*";
							$result = $bstr / $astr,last switch if $op eq "/";
							$result = $bstr + $astr,last switch if $op eq "+";
							$result = $bstr - $astr,last switch if $op eq "-";
				}	
				push @temp, $result;
				$astr = "";
				$bstr = "";
		}
	}
	return pop @temp;
}

sub IsCorrectBrackets {
	my $expr = shift;
        $expr =~ s/[^()]//g;
        my $count = 0;
        for my $c (split //, $expr) { 
            if( $c eq '(' ) { $count++; }
            elsif( $c eq ')' ) { $count--; }        
            if ($count < 0) { return -1; }
       }
    $count == 0 ? 1 : 0;
}

sub GetPolishNotation {
	my @exp=split //,shift;
	my $res = GetExpression(@exp);	
	$outputstr = $op = "";	
	$res =~ s/!/-/g;	
    	return $res;
}

sub Calculation {
	my @exp=split //,shift;
	my $res = GetExpression(@exp);
	$outputstr = $op = "";
	@outstr = split //, $res;			
	my $res1 = Counting();	
	$res1 =~ s/!/-/g;
	print "RESULT ".$res1."\n";
    	return $res1;
}


sub request {
    my $type = shift;
    my $expr = shift;
    given ($type) {
        when (1) { Calculation($expr); }
        when (2) { IsCorrectBrackets($expr); }
        when (3) { GetPolishNotation($expr); }
        default { return 'Unknown type'; }
    }
}

1;
